#       NU     BS     BS     BS     NL
# 1: BS -0.040 -0.982 -0.173 -0.017 0.0486  <= -0.069
# 2: BS -0.016 0.6599 -0.564 -0.198 0.4536  <= 0.0099
# 3: BS -0.020 0.9917 0.0683 -0.091 -0.053  <= 0.0864
# 4: BS -0.255 0.0619 0.3275 -0.326 0.8469  <= -0.006
# 5: BS 0.0497 0.1595 0.9823 -0.054 -0.064  <= 0.0693
# 6: BS -0.469 0.7474 0.3014 0.2342 -0.274  <= 0.1073
# 7: BS 0.0177 -0.984 0.0567 -0.041 0.1618  <= -0.071
# 8: NU 0.0247 -0.481 -0.833 -0.225 0.1475  <= -0.099
# 9: BS -0.626 0.4793 0.6001 0.0015 0.1333  <= 0.0442
#10: BS 0.2158 0.6917 0.1598 0.4158 -0.525  <= 0.1301
#11: NU -0.115 0.9861 -0.073 0.0115 -0.092  <= 0.0708
#12: BS -0.395 -0.418 -0.294 -0.467 0.6020  <= -0.110
#13: BS 0.0496 0.1595 0.9823 -0.054 -0.064  <= 0.0692
#14: BS -0.254 0.0620 0.3273 -0.326 0.8470  <= -0.006
#15: NU 0.0168 -0.659 0.5648 0.1982 -0.453  <= -0.009
#(*) Bounded variables:
#i0 in [0.0, 0.1]
#i1 in [0.0, 0.1]
#i2 in [0.0, 0.1]
#i3 in [0.0, 0.1]
#i4 in [0.0, 0.1]

#lpi.add_double_bounded_cols(["i0","i1","i2","i3","i4"], 0., 0.1)
#lpi.add_dense_row(np.array([-0.040,-0.982,-0.173,-0.017,0.0486]),-0.069,normalize=False)
#lpi.add_dense_row(np.array([-0.016,0.6599,-0.564,-0.198,0.4536]),0.0099,normalize=False)
#lpi.add_dense_row(np.array([-0.020,0.9917,0.0683,-0.091,-0.053]),0.0864,normalize=False)
#lpi.add_dense_row(np.array([-0.255,0.0619,0.3275,-0.326,0.8469]),-0.006,normalize=False)
#lpi.add_dense_row(np.array([0.0497,0.1595,0.9823,-0.054,-0.064]),0.0693,normalize=False)
#lpi.add_dense_row(np.array([-0.469,0.7474,0.3014,0.2342,-0.274]),0.1073,normalize=False)
#lpi.add_dense_row(np.array([0.0177,-0.984,0.0567,-0.041,0.1618]),-0.071,normalize=False)
#lpi.add_dense_row(np.array([0.0247,-0.481,-0.833,-0.225,0.1475]),-0.099,normalize=False)
#lpi.add_dense_row(np.array([-0.626,0.4793,0.6001,0.0015,0.1333]),0.0442,normalize=False)
#lpi.add_dense_row(np.array([0.2158,0.6917,0.1598,0.4158,-0.525]),0.1301,normalize=False)
#lpi.add_dense_row(np.array([-0.115,0.9861,-0.073,0.0115,-0.092]),0.0708,normalize=False)
#lpi.add_dense_row(np.array([-0.395,-0.418,-0.294,-0.467,0.6020]),-0.110,normalize=False)
#lpi.add_dense_row(np.array([0.0496,0.1595,0.9823,-0.054,-0.064]),0.0692,normalize=False)
#lpi.add_dense_row(np.array([-0.254,0.0620,0.3273,-0.326,0.8470]),-0.006,normalize=False)
#lpi.add_dense_row(np.array([0.0168,-0.659,0.5648,0.1982,-0.453]),-0.009,normalize=False)

#assert(res[4]==0.00015978857555871634)

#      NU     BS     BS     BS     BS
# 1: BS -0.040 -0.982 -0.173 -0.017 0.0486  <= -0.069
# 2: NU -0.016 0.6599 -0.564 -0.198 0.4536  <= 0.0099
# 3: BS -0.020 0.9917 0.0683 -0.091 -0.053  <= 0.0864
# 4: BS -0.255 0.0619 0.3275 -0.326 0.8469  <= -0.006
# 5: BS 0.0497 0.1595 0.9823 -0.054 -0.064  <= 0.0693
# 6: BS -0.469 0.7474 0.3014 0.2342 -0.274  <= 0.1073
# 7: BS 0.0177 -0.984 0.0567 -0.041 0.1618  <= -0.071
# 8: NU 0.0247 -0.481 -0.833 -0.225 0.1475  <= -0.099
# 9: BS -0.626 0.4793 0.6001 0.0015 0.1333  <= 0.0442
#10: BS 0.2158 0.6917 0.1598 0.4158 -0.525  <= 0.1301
#11: NU -0.115 0.9861 -0.073 0.0115 -0.092  <= 0.0708
#12: BS -0.395 -0.418 -0.294 -0.467 0.6020  <= -0.110
#13: BS 0.0496 0.1595 0.9823 -0.054 -0.064  <= 0.0692
#14: BS -0.254 0.0620 0.3273 -0.326 0.8470  <= -0.006
#15: NU 0.0168 -0.659 0.5648 0.1982 -0.453  <= -0.009
#(*) Bounded variables:
#i0 in [0.0, 0.1]
#i1 in [0.0, 0.1]
#i2 in [0.0, 0.1]
#i3 in [0.0, 0.1]
#i4 in [0.0, 0.1]




----------------------------------------------------
ALT
----------------------------------------------------


# 1 - 3
[(0.0530810566127772, 0.1), (0.07694966242533909, 0.08793798119032621), (0.04649712288009132, 0.06051834584425654), (0.0797988767451617, 0.1), (0.00015978857555871634, 0.027161574607351534)]
[(0.0530810566127772, 0.1), (0.07694966242533909, 0.08793798119032621), (0.04649712288009132, 0.06051834584425654), (0.0797988767451617, 0.1), (0.00015978857555871634, 0.027161574607351534)]
[(0.0530810566127772, 0.1), (0.07695146365405942, 0.08793798119032621), (0.04649712288009132, 0.06051834584425654), (0.0797988767451617, 0.1), (0.00015978857555871634, 0.027160907450261486)]
[(0.0530810566127772, 0.1), (0.07695146365405942, 0.08622126087613094), (0.04649712288009132, 0.05572781510635762), (0.0797988767451617, 0.1), (0.00015978857555871634, 0.025355253031046344)]
[(0.0530810566127772, 0.1), (0.08152191990258179, 0.08622126087613094), (0.04650149601698328, 0.053303201620119575), (0.0797988767451617, 0.1), (0.00015978857555871634, 0.025355253031046344)]


[(0.0530810566127772, 0.1), (0.07695146365405942, 0.08622126087613094), (0.04649712288009132, 0.05572781510635762), (0.0797988767451617, 0.1), (0.00015978857555871634, 0.025355253031046344)]

0 = {float64} 0.1
1 = {float64} 0.08606502861564716
2 = {float64} 0.04650149601698328
3 = {float64} 0.1
4 = {float64} 0.0019624003233656537
__len__ = {int} 5

Lp has 5 columns (variables) and 18 rows (constraints)
       *i0    *i1    *i2    *i3    *i4
min [2m[37m0.0000[0m [2m[37m0.0000[0m [2m[37m0.0000[0m [2m[37m0.0000[0m 1.0000
subject to:
       NU     BS     BS     BS     NL
 1: BS -0.040 -0.982 -0.173 -0.017 0.0486  <= -0.069
 2: BS -0.016 0.6599 -0.564 -0.198 0.4536  <= 0.0099
 3: BS -0.020 0.9917 0.0683 -0.091 -0.053  <= 0.0864
 4: BS -0.255 0.0619 0.3275 -0.326 0.8469  <= -0.006
 5: BS 0.0497 0.1595 0.9823 -0.054 -0.064  <= 0.0693
 6: BS -0.469 0.7474 0.3014 0.2342 -0.274  <= 0.1073
 7: BS 0.0177 -0.984 0.0567 -0.041 0.1618  <= -0.071
 8: BS 0.0247 -0.481 -0.833 -0.225 0.1475  <= -0.099
 9: BS -0.626 0.4793 0.6001 0.0015 0.1333  <= 0.0442
10: BS 0.2158 0.6917 0.1598 0.4158 -0.525  <= 0.1301
11: NU -0.115 0.9861 -0.073 0.0115 -0.092  <= 0.0708
12: BS -0.395 -0.418 -0.294 -0.467 0.6020  <= -0.110
13: BS 0.0496 0.1595 0.9823 -0.054 -0.064  <= 0.0692
14: BS -0.254 0.0620 0.3273 -0.326 0.8470  <= -0.006
15: NU 0.0168 -0.659 0.5648 0.1982 -0.453  <= -0.009
16: BS 0.0179 -0.986 0.0742 -0.034 0.1435  <= -0.070
17: BS -0.023 0.4352 0.8522 0.2331 -0.171  <= 0.0977
18: NU 0.1005 -0.933 -0.290 -0.105 0.1533  <= -0.094
(*) Bounded variables:
i0 in [0.0, 0.1]
i1 in [0.0, 0.1]
i2 in [0.0, 0.1]
i3 in [0.0, 0.1]
i4 in [0.0, 0.1]


0 = {float64} 0.1
1 = {float64} 0.08622481147716693
2 = {float64} 0.049247640936848344
3 = {float64} 0.0882148261176353
4 = {float64} 0.0




WIE SAH DIESES PROBLEM BEI DER KONTRAKTION DAVOR AUS???




[(0.0530810566127772, 0.1), (0.07694966242533909, 0.08793798119032621), (0.04649712288009132, 0.06051834584425654), (0.0797988767451617, 0.1), (0.00015978857555871634, 0.027161574607351534)]

[(0.0530810566127772, 0.1), (0.07695146365405942, 0.08793798119032621), (0.04649712288009132, 0.06051834584425654), (0.0797988767451617, 0.1), (0.00015978857555871634, 0.027160907450261486)]



Lp has 5 columns (variables) and 17 rows (constraints)
       *i0    *i1    *i2    *i3    *i4
min -0.125 2.3340 4.5706 1.2500 -0.917
subject to:
       NU     BS     BS     BS     BS
 1: BS -0.040 -0.982 -0.173 -0.017 0.0486  <= -0.069
 2: NU -0.016 0.6599 -0.564 -0.198 0.4536  <= 0.0099
 3: BS -0.020 0.9917 0.0683 -0.091 -0.053  <= 0.0864
 4: BS -0.255 0.0619 0.3275 -0.326 0.8469  <= -0.006
 5: BS 0.0497 0.1595 0.9823 -0.054 -0.064  <= 0.0693
 6: BS -0.469 0.7474 0.3014 0.2342 -0.274  <= 0.1073
 7: BS 0.0177 -0.984 0.0567 -0.041 0.1618  <= -0.071
 8: NU 0.0247 -0.481 -0.833 -0.225 0.1475  <= -0.099
 9: BS -0.626 0.4793 0.6001 0.0015 0.1333  <= 0.0442
10: BS 0.2158 0.6917 0.1598 0.4158 -0.525  <= 0.1301
11: NU -0.115 0.9861 -0.073 0.0115 -0.092  <= 0.0708
12: BS -0.395 -0.418 -0.294 -0.467 0.6020  <= -0.110
13: BS 0.0496 0.1595 0.9823 -0.054 -0.064  <= 0.0692
14: BS -0.254 0.0620 0.3273 -0.326 0.8470  <= -0.006
15: NU 0.0168 -0.659 0.5648 0.1982 -0.453  <= -0.009
16: BS 0.0179 -0.986 0.0742 -0.034 0.1435  <= -0.070
17: BS -0.023 0.4352 0.8522 0.2331 -0.171  <= 0.0977
(*) Bounded variables:
i0 in [0.0, 0.1]
i1 in [0.0, 0.1]
i2 in [0.0, 0.1]
i3 in [0.0, 0.1]
i4 in [0.0, 0.1]



